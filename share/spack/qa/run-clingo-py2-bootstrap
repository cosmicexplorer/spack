#!/bin/bash -e
#
# Copyright 2013-2020 Lawrence Livermore National Security, LLC and other
# Spack Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)

#
# Description:
#     Bootstraps clingo, assuming the current machine has only python 2.6 and
#     gcc <4.5.
#
# Usage:
#     run-clingo-py2-bootstrap
#

ORIGINAL_PATH="$PATH"

. "$(dirname $0)/setup.sh"
check_dependencies $coverage git

# Move to root directory of Spack
# Allows script to be run from anywhere
cd "$SPACK_ROOT"

# Extract the major.minor.patch version in order to make spack install the
# exact same python later.
python --version 2>&1 \
  | awk '{print $2}' \
        > python-full-version.txt

# Verify that we are running python 2.6.
if ! python --version 2>&1 | grep -F 2.6; then
  echo >&2 "python was not 2.6! was $(cat python-full-version.txt)"
  exit 1
fi

# Game plan: install the same python, with a much less broken installation
# (headers and libraries where clingo can find them). But first, we'll need to
# install yet another python, then work our way back.

# (~dbm~pyexpat is necessary to build python 2 in this environment.)
spack install 'python@2.7.18~dbm~pyexpat+shared'

# Many other libraries will fail to build correctly when we load this new gcc
# unless we enable +binutils.
spack install --verbose --fail-fast -y -n -j 6 'gcc@10.2.0+binutils'

# Load the newer python to avoid having this build fail while looking for the
# broken centos6 python library in /usr/lib64.
# TODO: sandbox all builds with fakechroot to avoid this double bootstrapping!
spack load 'python@2.7.18~dbm~pyexpat+shared'
# Install the same python again, this time ready to build modules against.
spack install "python@$(cat python-full-version.txt)~dbm~pyexpat+shared"
# Our python is now the same again, but with a reasonable header and shared
# library arrangement!
spack load "python@$(cat python-full-version.txt)~dbm~pyexpat+shared"
# Ensure spack has registered the built gcc as a compiler.
spack compiler find
# Build clingo.
spack install --verbose --fail-fast -y -n 'clingo@spack+python%gcc@10.2.0'

# For fun, make it run a solve on the same spec.
spack solve 'clingo@spack+python'
if spack spec 'clingo@spack+python'; then
  echo 1>&2 UNEXPECTED FAILURE: spack spec should have failed
  exit 1
else
  echo 1>&2 EXPECTED FAILURE: spack spec uses the v1 concretizer.
fi
